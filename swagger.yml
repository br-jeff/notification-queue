components:
  schemas:
    ListUserSerialize:
      properties:
        data:
          $ref: "#/components/schemas/UserSerializer"
          items: {}
          minItems: 1
          type: array
        count:
          type: number
      type: object
      required:
        - data
        - count
    UserSerializer:
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        username:
          type: string
        isAdmin:
          type: boolean
      type: object
      required:
        - id
        - name
        - username
        - isAdmin
    CreateUserSchema:
      properties:
        name:
          type: string
        username:
          type: string
        password:
          type: string
      type: object
      required:
        - name
        - username
        - password
    LoginSchema:
      properties:
        username:
          type: string
        password:
          type: string
      type: object
      required:
        - username
        - password
    PaginationSchema:
      properties:
        page:
          minimum: 0
          type: number
        size:
          type: number
          minimum: 1
      type: object
      required:
        - page
        - size
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
info:
  title: ECCOMERCE API
  version: 1.0.0
  description: This project is a queue message
openapi: 3.0.0
paths:
  /health:
    get:
      operationId: Health.getHealth
      responses:
        "200":
          content:
            application/json: {}
          description: Successful response
      summary: Server Health
      tags:
        - Health
      description: This is to check if server is running
  /user/list:
    get:
      operationId: UserController.list
      parameters:
        - in: query
          name: page
          required: true
          schema:
            minimum: 0
            type: number
        - in: query
          name: size
          required: true
          schema:
            type: number
            minimum: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUserSerialize"
          description: ""
      summary: List Users
      tags:
        - User
      description: "This route list users by user company_id "
  /user/create/{companyId}:
    post:
      operationId: UserController.create
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            pattern: "[^\\/#\\?]+?"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserSchema"
        description: CreateUserSchema
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSerializer"
          description: ""
      summary: Create Users
      tags:
        - User
      description: This route list users by user company_id
  /user/login:
    post:
      operationId: UserController.login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginSchema"
        description: LoginSchema
        required: false
      responses:
        "200":
          content:
            application/json: {}
          description: Successful response
      summary: Login
      tags:
        - User
      description: Login route
servers:
  - url: http://localhost:8080
    description: Development
